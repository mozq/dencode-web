/*!
 * dencode-web
 * Copyright 2016 Mozq
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dencode.logic.dencoder;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;

import org.junit.jupiter.api.Test;

import com.dencode.logic.model.DencodeCondition;

public class NumberHexDencoderTest {
	
	@Test
	public void test() {
		// Blank
		testDencoder("", null);
		
		// Integer
		testDencoder("0", "0");
		testDencoder("1", "1");
		testDencoder("2", "2");
		testDencoder("9", "9");
		testDencoder("10", "a");
		testDencoder("99", "63");
		testDencoder("100", "64");
		testDencoder("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "241fc1742fe8d29593a6afe52b31741cfe5a7f8e67e477381be47851641ef7bf14baccff196ce3f0ad2");
		testDencoder("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1249ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f0fffffffffffffffffffffffff");
		
		// Integer (+)
		testDencoder("+0", "0", "0");
		testDencoder("+1", "1", "1");
		testDencoder("+2", "2", "2");
		testDencoder("+9", "9", "9");
		testDencoder("+10", "a", "10");
		testDencoder("+99", "63", "99");
		testDencoder("+100", "64", "100");
		testDencoder("+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "241fc1742fe8d29593a6afe52b31741cfe5a7f8e67e477381be47851641ef7bf14baccff196ce3f0ad2", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("+9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1249ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f0fffffffffffffffffffffffff", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Integer (-)
		testDencoder("-0", "0", "0");
		testDencoder("-1", "-1");
		testDencoder("-2", "-2");
		testDencoder("-9", "-9");
		testDencoder("-10", "-a");
		testDencoder("-99", "-63");
		testDencoder("-100", "-64");
		testDencoder("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "-241fc1742fe8d29593a6afe52b31741cfe5a7f8e67e477381be47851641ef7bf14baccff196ce3f0ad2");
		testDencoder("-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "-1249ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f0fffffffffffffffffffffffff");
		
		// Integer
		testDencoder("00", "0", "0");
		testDencoder("01", "1", "1");
		testDencoder("02", "2", "2");
		testDencoder("09", "9", "9");
		testDencoder("010", "a", "10");
		testDencoder("099", "63", "99");
		testDencoder("0100", "64", "100");
		testDencoder("01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "241fc1742fe8d29593a6afe52b31741cfe5a7f8e67e477381be47851641ef7bf14baccff196ce3f0ad2", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("09999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1249ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f0fffffffffffffffffffffffff", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Decimal
		testDencoder("0.0", "0.0");
		testDencoder("0.00", "0.0", "0.0");
		testDencoder("1.1", "1.1999...", "1.1...");
		testDencoder("1.01", "1.028f5c28f5c28f5c...", "1.01...");
		testDencoder("1.010", "1.028f5c28f5c28f5c...", "1.01...");
		testDencoder("1.001", "1.004189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e56...", "1.001...");
		testDencoder("1.0010", "1.004189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e56...", "1.001...");
		testDencoder("2.2", "2.333...", "2.2...");
		testDencoder("9.9", "9.e666...", "9.9...");
		testDencoder("10.10", "a.1999...", "10.1...");
		testDencoder("100.100", "64.1999...", "100.1...");
		testDencoder("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "241fc1742fe8d29593a6afe52b31741cfe5a7f8e67e477381be47851641ef7bf14baccff196ce3f0ad2.1f9add3746f65f1c3f968abdf155e86c6eadc77772a3da57409d5da6b08e5004830c4fcba5e5b77bc75d...", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889..."); // Diff
		testDencoder("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1249ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f0fffffffffffffffffffffffff.fff...", "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); // Diff
		
		// Decimal (+)
		testDencoder("+0.0", "0.0", "0.0");
		testDencoder("+0.00", "0.0", "0.0");
		testDencoder("+1.1", "1.1999...", "1.1...");
		testDencoder("+1.01", "1.028f5c28f5c28f5c...", "1.01...");
		testDencoder("+1.010", "1.028f5c28f5c28f5c...", "1.01...");
		testDencoder("+1.001", "1.004189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e56...", "1.001...");
		testDencoder("+1.0010", "1.004189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e56...", "1.001...");
		testDencoder("+2.2", "2.333...", "2.2...");
		testDencoder("+9.9", "9.e666...", "9.9...");
		testDencoder("+10.10", "a.1999...", "10.1...");
		testDencoder("+100.100", "64.1999...", "100.1...");
		testDencoder("+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "241fc1742fe8d29593a6afe52b31741cfe5a7f8e67e477381be47851641ef7bf14baccff196ce3f0ad2.1f9add3746f65f1c3f968abdf155e86c6eadc77772a3da57409d5da6b08e5004830c4fcba5e5b77bc75d...", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889..."); // Diff
		testDencoder("+9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1249ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f0fffffffffffffffffffffffff.fff...", "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); // Diff
		
		// Decimal (-)
		testDencoder("-0.0", "0.0", "0.0");
		testDencoder("-0.00", "0.0", "0.0");
		testDencoder("-1.1", "-1.1999...", "-1.1...");
		testDencoder("-1.01", "-1.028f5c28f5c28f5c...", "-1.01...");
		testDencoder("-1.010", "-1.028f5c28f5c28f5c...", "-1.01...");
		testDencoder("-1.001", "-1.004189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e56...", "-1.001...");
		testDencoder("-1.0010", "-1.004189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e5604189374bc6a7ef9db22d0e56...", "-1.001...");
		testDencoder("-2.2", "-2.333...", "-2.2...");
		testDencoder("-9.9", "-9.e666...", "-9.9...");
		testDencoder("-10.10", "-a.1999...", "-10.1...");
		testDencoder("-100.100", "-64.1999...", "-100.1...");
		testDencoder("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "-241fc1742fe8d29593a6afe52b31741cfe5a7f8e67e477381be47851641ef7bf14baccff196ce3f0ad2.1f9add3746f65f1c3f968abdf155e86c6eadc77772a3da57409d5da6b08e5004830c4fcba5e5b77bc75d...", "-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889..."); // Diff
		testDencoder("-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "-1249ad2594c37ceb0b2784c4ce0bf38ace408e211a7caab24308a82e8f0fffffffffffffffffffffffff.fff...", "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); // Diff
		
		// Truncated decimal 0
		testDencoder("0...", "0", "0"); // Non-repeating
		testDencoder("0....", "0", "0"); // Non-repeating
		
		// Truncated decimal (1)
		testDencoder("0.1...", "0.1999..."); // Non-repeating
		testDencoder("0.11...", "0.1c71c71c7...", "0.111..."); // Repeating
		testDencoder("0.111...", "0.1c71c71c7...", "0.111..."); // Repeating
		testDencoder("0.1111...", "0.1c71c71c7...", "0.111..."); // Repeating
		testDencoder("0.11111...", "0.1c71c71c7...", "0.111..."); // Repeating
		
		// Truncated decimal (12)
		testDencoder("0.12...", "0.1eb851eb851eb85..."); // Non-repeating
		testDencoder("0.1212...", "0.1f07c1f07c1f07c...", "0.121212..."); // Repeating
		testDencoder("0.121212...", "0.1f07c1f07c1f07c...", "0.121212..."); // Repeating
		testDencoder("0.12121212...", "0.1f07c1f07c1f07c...", "0.121212..."); // Repeating
		testDencoder("0.1212121212...", "0.1f07c1f07c1f07c...", "0.121212..."); // Repeating
		
		// Truncated decimal (428571)
		testDencoder("42.8571428571428571428571...", "2a.db6db6db6...", "42.857142857142857142...");
		testDencoder("4.28571428571428571428571...", "4.492492492...", "4.285714285714285714...");
		testDencoder("0.428571428571428571428571...", "0.6db6db6db...", "0.428571428571428571...");
		testDencoder("0.0428571428571428571428571...", "0.0af8af8af8...", "0.0428571428571428571...");
		testDencoder("0.00428571428571428571428571...", "0.0118de5ab277f44c118de5ab277f44c118de5ab277f44c...", "0.00428571428571428571...");
		testDencoder("-0.428571428571428571428571...", "-0.6db6db6db...", "-0.428571428571428571...");
		
		// Truncated decimal 1(571428)
		testDencoder("157.1428571428571428571428...", "9d.249249249...", "157.142857142857142857...");
		testDencoder("15.71428571428571428571428...", "f.b6db6db6d...", "15.714285714285714285...");
		testDencoder("1.571428571428571428571428...", "1.924924924...", "1.571428571428571428...");
		testDencoder("0.1571428571428571428571428...", "0.283a83a83a...", "0.1571428571428571428...");
		testDencoder("0.01571428571428571428571428...", "0.0405d9f7390d2a6c405d9f7390d2a6c405d9f7390d2a6c...", "0.01571428571428571428...");
		testDencoder("0.001571428571428571428571428...", "0.0066fc325281510ad33c8ff1f4e1dd7a0095cbec1aeaa46cd6298b8e7b77139a2f6585b4843e066fc325...", "0.001571428571428571428...");
		testDencoder("-1.571428571428571428571428...", "-1.924924924...", "-1.571428571428571428...");
		
		// Truncated decimal 58(114)
		testDencoder("581.44144144144...", "245.71024e6a171024e6a171024e6a1...", "581.441441441...");
		testDencoder("58.144144144144...", "3a.24e6a171024e6a171024e6a1710...", "58.144144144...");
		testDencoder("5.8144144144144...", "5.d07d768b4d07d768b4d07d768b4...", "5.8144144144...");
		testDencoder("0.58144144144144...", "0.94d958a787b3fbf0dee1a625745480c8bdabae72f241214d958a787b3fbf0dee1a625745480c8bdabae7...", "0.58144144144...");
		testDencoder("0.058144144144144...", "0.0ee288dd8d91ff981649c3d08ba20ce0dfc45e3eb1d350215bc10c0c532cb497cf703bed5401412f7917...", "0.058144144144...");
		testDencoder("0.0058144144144144...", "0.017d0dafc15b665c023a9394dac367b016606fd311c854d022c681346eb7aba8c7f19f97bb99b9b7f282...", "0.0058144144144...");
		testDencoder("-5.8144144144144...", "-5.d07d768b4d07d768b4d07d768b4...", "-5.8144144144...");
		
		// Truncated decimal 15(857142)
		testDencoder("1585.7142857142857142857142...", "631.b6db6db6d...", "1585.714285714285714285...");
		testDencoder("158.57142857142857142857142...", "9e.924924924...", "158.571428571428571428...");
		testDencoder("15.857142857142857142857142...", "f.db6db6db6...", "15.857142857142857142...");
		testDencoder("1.5857142857142857142857142...", "1.95f15f15f1...", "1.5857142857142857142...");
		testDencoder("0.15857142857142857142857142...", "0.2898231bcb564efe898231bcb564efe898231bcb564efe...", "0.15857142857142857142...");
		testDencoder("0.015857142857142857142857142...", "0.040f36b5fabbd4b30dc0382c788a17fda8d04f94556e4ca759d1c61223b1974269e92def07e640f36b5f...", "0.015857142857142857142...");
		testDencoder("0.0015857142857142857142857142...", "0.0067ebdeff792edeb49338d13f4102662a7b3b286ef16e10bc2e93ce9d2b5bed0a975164b3fd6ce52456...", "0.0015857142857142857142...");
		testDencoder("-15.857142857142857142857142...", "-f.db6db6db6...", "-15.857142857142857142...");
		
		// Truncated decimal 11(1886792452830)
		testDencoder("1118.86792452830188679245283018867924528301886792452830...", "45e.de304d4873ecade304d4873ecade304d4873eca...", "1118.867924528301886792452830188679245283018...");
		testDencoder("111.886792452830188679245283018867924528301886792452830...", "6f.e304d4873ecade304d4873ecade304d4873ecad...", "111.886792452830188679245283018867924528301...");
		testDencoder("11.1886792452830188679245283018867924528301886792452830...", "b.304d4873ecade304d4873ecade304d4873ecade...", "11.188679245283018867924528301886792452830...");
		testDencoder("1.11886792452830188679245283018867924528301886792452830...", "1.1e6e20d86477c9e6e20d86477c9e6e20d86477c9...", "1.1188679245283018867924528301886792452830...");
		testDencoder("0.111886792452830188679245283018867924528301886792452830...", "0.1ca49ce2707260fd7d015a3a59430b0348d6d8c763e367c0a0bfa97169af3d3f2dca49ce2707260fd7d0...", "0.11188679245283018867924528301886792452830...");
		testDencoder("0.0111886792452830188679245283018867924528301886792452830...", "0.02dd42e371a509b2f2e68905d5b9e78054157c13f0638a6010132a8b575e52ecb7c76dc7d0b3ea34c8c8...", "0.011188679245283018867924528301886792452830...");
		testDencoder("0.00111886792452830188679245283018867924528301886792452830...", "0.0049537d24f6e75eb1e3da80955f63f33b9bbf9b9809f43cce68510def23084adf2d8afa61ab976badad...", "0.0011188679245283018867924528301886792452830...");
		testDencoder("-11.1886792452830188679245283018867924528301886792452830...", "-b.304d4873ecade304d4873ecade304d4873ecade...", "-11.188679245283018867924528301886792452830...");
		
		// Un-parsable
		testDencoder("x", null);
		testDencoder("x.x", null);
		testDencoder("x/x", null);
		testDencoder("0b", null);
		testDencoder("0bx", null);
		testDencoder("0o", null);
		testDencoder("0ox", null);
		testDencoder("0x", null);
		testDencoder("0xx", null);
		testDencoder("0.x", null);
		testDencoder(" ", null);
	}
	
	@Test
	public void test_decoder() {
		// Blank
		testDecoder("", null);
	}
	
	private void testDencoder(String value, String expectedEncodedValue) {
		testDencoder(value, expectedEncodedValue, value);
	}
	
	private void testDencoder(String value, String expectedEncodedValue, String expectedDecodedValue) {
		String encodedValue = NumberHexDencoder.encNumHex(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedEncodedValue, encodedValue);
		
		if (expectedEncodedValue == null) {
			return;
		}
		
		String decodedValue = NumberHexDencoder.decNumHex(new DencodeCondition(encodedValue, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
	
	private void testDecoder(String value, String expectedDecodedValue) {
		String decodedValue = NumberHexDencoder.decNumHex(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
 }
 