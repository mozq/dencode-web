/*!
 * dencode-web
 * Copyright 2016 Mozq
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dencode.logic.dencoder;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;

import org.junit.jupiter.api.Test;

import com.dencode.logic.model.DencodeCondition;

public class NumberDecDencoderTest {
	
	@Test
	public void test() {
		// Blank
		testDencoder("", null);
		
		// Integer
		testDencoder("0", "0");
		testDencoder("1", "1");
		testDencoder("2", "2");
		testDencoder("9", "9");
		testDencoder("10", "10");
		testDencoder("99", "99");
		testDencoder("100", "100");
		testDencoder("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Integer (+)
		testDencoder("+0", "0", "0");
		testDencoder("+1", "1", "1");
		testDencoder("+2", "2", "2");
		testDencoder("+9", "9", "9");
		testDencoder("+10", "10", "10");
		testDencoder("+99", "99", "99");
		testDencoder("+100", "100", "100");
		testDencoder("+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("+9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Integer (-)
		testDencoder("-0", "0", "0");
		testDencoder("-1", "-1");
		testDencoder("-2", "-2");
		testDencoder("-9", "-9");
		testDencoder("-10", "-10");
		testDencoder("-99", "-99");
		testDencoder("-100", "-100");
		testDencoder("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Integer
		testDencoder("00", "0", "0");
		testDencoder("01", "1", "1");
		testDencoder("02", "2", "2");
		testDencoder("09", "9", "9");
		testDencoder("010", "10", "10");
		testDencoder("099", "99", "99");
		testDencoder("0100", "100", "100");
		testDencoder("01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("09999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Decimal
		testDencoder("0.0", "0.0");
		testDencoder("0.00", "0.00");
		testDencoder("1.1", "1.1");
		testDencoder("1.01", "1.01");
		testDencoder("1.010", "1.010");
		testDencoder("1.001", "1.001");
		testDencoder("1.0010", "1.0010");
		testDencoder("2.2", "2.2");
		testDencoder("9.9", "9.9");
		testDencoder("10.10", "10.10");
		testDencoder("99.99", "99.99");
		testDencoder("100.100", "100.100");
		testDencoder("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Decimal (+)
		testDencoder("+0.0", "0.0", "0.0");
		testDencoder("+0.00", "0.00", "0.00");
		testDencoder("+1.1", "1.1", "1.1");
		testDencoder("+1.01", "1.01", "1.01");
		testDencoder("+1.010", "1.010", "1.010");
		testDencoder("+1.001", "1.001", "1.001");
		testDencoder("+1.0010", "1.0010", "1.0010");
		testDencoder("+2.2", "2.2", "2.2");
		testDencoder("+9.9", "9.9", "9.9");
		testDencoder("+10.10", "10.10", "10.10");
		testDencoder("+99.99", "99.99", "99.99");
		testDencoder("+100.100", "100.100", "100.100");
		testDencoder("+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder
		
		// Decimal (-)
		testDencoder("-0.0", "0.0", "0.0");
		testDencoder("-0.00", "0.00", "0.00");
		testDencoder("-1.1", "-1.1");
		testDencoder("-1.01", "-1.01");
		testDencoder("-1.010", "-1.010");
		testDencoder("-1.001", "-1.001");
		testDencoder("-1.0010", "-1.0010");
		testDencoder("-2.2", "-2.2");
		testDencoder("-9.9", "-9.9");
		testDencoder("-10.10", "-10.10");
		testDencoder("-99.99", "-99.99");
		testDencoder("-100.100", "-100.100");
		testDencoder("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Truncated decimal 0
		testDencoder("0...", "0", "0"); // Non-repeating
		testDencoder("0....", "0", "0"); // Non-repeating
		
		// Truncated decimal (1)
		testDencoder("0.1...", "0.1..."); // Non-repeating
		testDencoder("0.11...", "0.111...", "0.111..."); // Repeating
		testDencoder("0.111...", "0.111..."); // Repeating
		testDencoder("0.1111...", "0.111...", "0.111..."); // Repeating
		testDencoder("0.11111...", "0.111...", "0.111..."); // Repeating
		
		// Truncated decimal (12)
		testDencoder("0.12...", "0.12..."); // Non-repeating
		testDencoder("0.1212...", "0.121212...", "0.121212..."); // Repeating
		testDencoder("0.121212...", "0.121212..."); // Repeating
		testDencoder("0.12121212...", "0.121212...", "0.121212..."); // Repeating
		testDencoder("0.1212121212...", "0.121212...", "0.121212..."); // Repeating
		
		// Truncated decimal (428571)
		testDencoder("42.8571428571428571428571...", "42.857142857142857142...", "42.857142857142857142...");
		testDencoder("4.28571428571428571428571...", "4.285714285714285714...", "4.285714285714285714...");
		testDencoder("0.428571428571428571428571...", "0.428571428571428571...", "0.428571428571428571...");
		testDencoder("0.0428571428571428571428571...", "0.0428571428571428571...", "0.0428571428571428571...");
		testDencoder("0.00428571428571428571428571...", "0.00428571428571428571...", "0.00428571428571428571...");
		testDencoder("-0.428571428571428571428571...", "-0.428571428571428571...", "-0.428571428571428571...");
		
		// Truncated decimal 1(571428)
		testDencoder("157.1428571428571428571428...", "157.142857142857142857...", "157.142857142857142857...");
		testDencoder("15.71428571428571428571428...", "15.714285714285714285...", "15.714285714285714285...");
		testDencoder("1.571428571428571428571428...", "1.571428571428571428...", "1.571428571428571428...");
		testDencoder("0.1571428571428571428571428...", "0.1571428571428571428...", "0.1571428571428571428...");
		testDencoder("0.01571428571428571428571428...", "0.01571428571428571428...", "0.01571428571428571428...");
		testDencoder("0.001571428571428571428571428...", "0.001571428571428571428...", "0.001571428571428571428...");
		testDencoder("-1.571428571428571428571428...", "-1.571428571428571428...", "-1.571428571428571428...");
		
		// Truncated decimal 58(114)
		testDencoder("581.44144144144...", "581.441441441...", "581.441441441...");
		testDencoder("58.144144144144...", "58.144144144...", "58.144144144...");
		testDencoder("5.8144144144144...", "5.8144144144...", "5.8144144144...");
		testDencoder("0.58144144144144...", "0.58144144144...", "0.58144144144...");
		testDencoder("0.058144144144144...", "0.058144144144...", "0.058144144144...");
		testDencoder("0.0058144144144144...", "0.0058144144144...", "0.0058144144144...");
		testDencoder("-5.8144144144144...", "-5.8144144144...", "-5.8144144144...");
		
		// Truncated decimal 15(857142)
		testDencoder("1585.7142857142857142857142...", "1585.714285714285714285...", "1585.714285714285714285...");
		testDencoder("158.57142857142857142857142...", "158.571428571428571428...", "158.571428571428571428...");
		testDencoder("15.857142857142857142857142...", "15.857142857142857142...", "15.857142857142857142...");
		testDencoder("1.5857142857142857142857142...", "1.5857142857142857142...", "1.5857142857142857142...");
		testDencoder("0.15857142857142857142857142...", "0.15857142857142857142...", "0.15857142857142857142...");
		testDencoder("0.015857142857142857142857142...", "0.015857142857142857142...", "0.015857142857142857142...");
		testDencoder("0.0015857142857142857142857142...", "0.0015857142857142857142...", "0.0015857142857142857142...");
		testDencoder("-15.857142857142857142857142...", "-15.857142857142857142...", "-15.857142857142857142...");
		
		// Truncated decimal 11(1886792452830)
		testDencoder("1118.86792452830188679245283018867924528301886792452830...", "1118.867924528301886792452830188679245283018...", "1118.867924528301886792452830188679245283018...");
		testDencoder("111.886792452830188679245283018867924528301886792452830...", "111.886792452830188679245283018867924528301...", "111.886792452830188679245283018867924528301...");
		testDencoder("11.1886792452830188679245283018867924528301886792452830...", "11.188679245283018867924528301886792452830...", "11.188679245283018867924528301886792452830...");
		testDencoder("1.11886792452830188679245283018867924528301886792452830...", "1.1188679245283018867924528301886792452830...", "1.1188679245283018867924528301886792452830...");
		testDencoder("0.111886792452830188679245283018867924528301886792452830...", "0.11188679245283018867924528301886792452830...", "0.11188679245283018867924528301886792452830...");
		testDencoder("0.0111886792452830188679245283018867924528301886792452830...", "0.011188679245283018867924528301886792452830...", "0.011188679245283018867924528301886792452830...");
		testDencoder("0.00111886792452830188679245283018867924528301886792452830...", "0.0011188679245283018867924528301886792452830...", "0.0011188679245283018867924528301886792452830...");
		testDencoder("-11.1886792452830188679245283018867924528301886792452830...", "-11.188679245283018867924528301886792452830...", "-11.188679245283018867924528301886792452830...");
		
		// Un-parsable
		testDencoder("x", null);
		testDencoder("x.x", null);
		testDencoder("x/x", null);
		testDencoder("0b", null);
		testDencoder("0bx", null);
		testDencoder("0o", null);
		testDencoder("0ox", null);
		testDencoder("0x", null);
		testDencoder("0xx", null);
		testDencoder("0.x", null);
		testDencoder(" ", null);
	}
	
	@Test
	public void test_decoder() {
		// Blank
		testDecoder("", null);
	}
	
	private void testDencoder(String value, String expectedEncodedValue) {
		testDencoder(value, expectedEncodedValue, value);
	}
	
	private void testDencoder(String value, String expectedEncodedValue, String expectedDecodedValue) {
		String encodedValue = NumberDecDencoder.encNumDec(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedEncodedValue, encodedValue);
		
		if (expectedEncodedValue == null) {
			return;
		}
		
		String decodedValue = NumberDecDencoder.decNumDec(new DencodeCondition(encodedValue, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
	
	private void testDecoder(String value, String expectedDecodedValue) {
		String decodedValue = NumberDecDencoder.decNumDec(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
 }
 