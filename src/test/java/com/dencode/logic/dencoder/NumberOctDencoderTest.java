/*!
 * dencode-web
 * Copyright 2016 Mozq
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dencode.logic.dencoder;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;

import org.junit.jupiter.api.Test;

import com.dencode.logic.model.DencodeCondition;

public class NumberOctDencoderTest {
	
	@Test
	public void test() {
		// Blank
		testDencoder("", null);
		
		// Integer
		testDencoder("0", "0");
		testDencoder("1", "1");
		testDencoder("2", "2");
		testDencoder("9", "11");
		testDencoder("10", "12");
		testDencoder("99", "143");
		testDencoder("100", "144");
		testDencoder("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "44077405641376432245311646537624531427203477455177434637443563403371074121310173675761227263177431331617605322");
		testDencoder("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "444465511312303371654131170230463405763425471004342043237125262206042501350741777777777777777777777777777777777");
		
		// Integer (+)
		testDencoder("+0", "0", "0");
		testDencoder("+1", "1", "1");
		testDencoder("+2", "2", "2");
		testDencoder("+9", "11", "9");
		testDencoder("+10", "12", "10");
		testDencoder("+99", "143", "99");
		testDencoder("+100", "144", "100");
		testDencoder("+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "44077405641376432245311646537624531427203477455177434637443563403371074121310173675761227263177431331617605322", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("+9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "444465511312303371654131170230463405763425471004342043237125262206042501350741777777777777777777777777777777777", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Integer (-)
		testDencoder("-0", "0", "0");
		testDencoder("-1", "-1");
		testDencoder("-2", "-2");
		testDencoder("-9", "-11");
		testDencoder("-10", "-12");
		testDencoder("-99", "-143");
		testDencoder("-100", "-144");
		testDencoder("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "-44077405641376432245311646537624531427203477455177434637443563403371074121310173675761227263177431331617605322");
		testDencoder("-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "-444465511312303371654131170230463405763425471004342043237125262206042501350741777777777777777777777777777777777");
		
		// Integer
		testDencoder("00", "0", "0");
		testDencoder("01", "1", "1");
		testDencoder("02", "2", "2");
		testDencoder("09", "11", "9");
		testDencoder("010", "12", "10");
		testDencoder("099", "143", "99");
		testDencoder("0100", "144", "100");
		testDencoder("01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "44077405641376432245311646537624531427203477455177434637443563403371074121310173675761227263177431331617605322", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
		testDencoder("09999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "444465511312303371654131170230463405763425471004342043237125262206042501350741777777777777777777777777777777777", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Decimal
		testDencoder("0.0", "0.0");
		testDencoder("0.00", "0.0", "0.0");
		testDencoder("1.1", "1.0631463146314...", "1.1...");
		testDencoder("1.01", "1.0050753412172702436560507534121727024365605075341217270243656...", "1.01...");
		testDencoder("1.010", "1.0050753412172702436560507534121727024365605075341217270243656...", "1.01...");
		testDencoder("1.001", "1.000406111564570651767635544264162540203044672274324773716662132071260101422335136152375747331055034530040611156...", "1.000999..."); // Diff
		testDencoder("1.0010", "1.000406111564570651767635544264162540203044672274324773716662132071260101422335136152375747331055034530040611156...", "1.000999..."); // Diff
		testDencoder("2.2", "2.146314631463...", "2.2...");
		testDencoder("9.9", "11.7146314631463...", "9.9...");
		testDencoder("10.10", "12.0631463146314...", "10.1...");
		testDencoder("100.100", "144.0631463146314...", "100.1...");
		testDencoder("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "44077405641376432245311646537624531427203477455177434637443563403371074121310173675761227263177431331617605322.077153351564336627616077455052757425275033067255616735625075512720116535515302162400220303047713513626673674353...", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889..."); // Diff
		testDencoder("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "444465511312303371654131170230463405763425471004342043237125262206042501350741777777777777777777777777777777777.777...", "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); // Diff
		
		// Decimal (+)
		testDencoder("+0.0", "0.0", "0.0");
		testDencoder("+0.00", "0.0", "0.0");
		testDencoder("+1.1", "1.0631463146314...", "1.1...");
		testDencoder("+1.01", "1.0050753412172702436560507534121727024365605075341217270243656...", "1.01...");
		testDencoder("+1.010", "1.0050753412172702436560507534121727024365605075341217270243656...", "1.01...");
		testDencoder("+1.001", "1.000406111564570651767635544264162540203044672274324773716662132071260101422335136152375747331055034530040611156...", "1.000999..."); // Diff
		testDencoder("+1.0010", "1.000406111564570651767635544264162540203044672274324773716662132071260101422335136152375747331055034530040611156...", "1.000999..."); // Diff
		testDencoder("+2.2", "2.146314631463...", "2.2...");
		testDencoder("+9.9", "11.7146314631463...", "9.9...");
		testDencoder("+10.10", "12.0631463146314...", "10.1...");
		testDencoder("+100.100", "144.0631463146314...", "100.1...");
		testDencoder("+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "44077405641376432245311646537624531427203477455177434637443563403371074121310173675761227263177431331617605322.077153351564336627616077455052757425275033067255616735625075512720116535515302162400220303047713513626673674353...", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889..."); // Diff
		testDencoder("+9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "444465511312303371654131170230463405763425471004342043237125262206042501350741777777777777777777777777777777777.777...", "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); // Diff
		
		// Decimal (-)
		testDencoder("-0.0", "0.0", "0.0");
		testDencoder("-0.00", "0.0", "0.0");
		testDencoder("-1.1", "-1.0631463146314...", "-1.1...");
		testDencoder("-1.01", "-1.0050753412172702436560507534121727024365605075341217270243656...", "-1.01...");
		testDencoder("-1.010", "-1.0050753412172702436560507534121727024365605075341217270243656...", "-1.01...");
		testDencoder("-1.001", "-1.000406111564570651767635544264162540203044672274324773716662132071260101422335136152375747331055034530040611156...", "-1.000999..."); // Diff
		testDencoder("-1.0010", "-1.000406111564570651767635544264162540203044672274324773716662132071260101422335136152375747331055034530040611156...", "-1.000999..."); // Diff
		testDencoder("-2.2", "-2.146314631463...", "-2.2...");
		testDencoder("-9.9", "-11.7146314631463...", "-9.9...");
		testDencoder("-10.10", "-12.0631463146314...", "-10.1...");
		testDencoder("-100.100", "-144.0631463146314...", "-100.1...");
		testDencoder("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "-44077405641376432245311646537624531427203477455177434637443563403371074121310173675761227263177431331617605322.077153351564336627616077455052757425275033067255616735625075512720116535515302162400220303047713513626673674353...", "-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889..."); // Diff
		testDencoder("-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "-444465511312303371654131170230463405763425471004342043237125262206042501350741777777777777777777777777777777777.777...", "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); // Diff
		
		// Truncated decimal 0
		testDencoder("0...", "0", "0"); // Non-repeating
		testDencoder("0....", "0", "0"); // Non-repeating
		
		// Truncated decimal (1)
		testDencoder("0.1...", "0.0631463146314..."); // Non-repeating
		testDencoder("0.11...", "0.070707...", "0.111..."); // Repeating
		testDencoder("0.111...", "0.070707...", "0.111..."); // Repeating
		testDencoder("0.1111...", "0.070707...", "0.111..."); // Repeating
		testDencoder("0.11111...", "0.070707...", "0.111..."); // Repeating
		
		// Truncated decimal (12)
		testDencoder("0.12...", "0.075341217270243656050753412172702436560507534121727024365605..."); // Non-repeating
		testDencoder("0.1212...", "0.076037017407603701740760370174...", "0.121212..."); // Repeating
		testDencoder("0.121212...", "0.076037017407603701740760370174...", "0.121212..."); // Repeating
		testDencoder("0.12121212...", "0.076037017407603701740760370174...", "0.121212..."); // Repeating
		testDencoder("0.1212121212...", "0.076037017407603701740760370174...", "0.121212..."); // Repeating
		
		// Truncated decimal (428571)
		testDencoder("42.8571428571428571428571...", "52.666...", "42.857142857142857142...");
		testDencoder("4.28571428571428571428571...", "4.222...", "4.285714285714285714...");
		testDencoder("0.428571428571428571428571...", "0.333...", "0.428571428571428571...");
		testDencoder("0.0428571428571428571428571...", "0.0257425742574...", "0.0428571428571428571...");
		testDencoder("0.00428571428571428571428571...", "0.0021433626531167750460214336265311677504602143362653116775046...", "0.00428571428571428571...");
		testDencoder("-0.428571428571428571428571...", "-0.333...", "-0.428571428571428571...");
		
		// Truncated decimal 1(571428)
		testDencoder("157.1428571428571428571428...", "235.111...", "157.142857142857142857...");
		testDencoder("15.71428571428571428571428...", "17.555...", "15.714285714285714285...");
		testDencoder("1.571428571428571428571428...", "1.444...", "1.571428571428571428...");
		testDencoder("0.1571428571428571428571428...", "0.1203520352035...", "0.1571428571428571428...");
		testDencoder("0.01571428571428571428571428...", "0.0100273175634415124661002731756344151246610027317563441512466...", "0.01571428571428571428...");
		testDencoder("0.001571428571428571428571428...", "0.000633741445120124205323171077617516073536400225627660327252215465424613434755670471505731302664410370063374144...", "0.001571428571428571428...");
		testDencoder("-1.571428571428571428571428...", "-1.444...", "-1.571428571428571428...");
		
		// Truncated decimal 58(114)
		testDencoder("581.44144144144...", "1105.342011163241342011163241342011163241...", "581.441441441...");
		testDencoder("58.144144144144...", "72.111632413420111632413420111632413420...", "58.144144144...");
		testDencoder("5.8144144144144...", "5.640765664264640765664264640765664264...", "5.8144144144...");
		testDencoder("0.58144144144144...", "0.451545305170366376770336703230453505220062136653534713622022051545305170366376770336703230453505220062136653534...", "0.58144144144...");
		testDencoder("0.058144144144144...", "0.035612106730662177714026223417204272101470157704274372616465004126740414030514545511371734035755250005011367442...", "0.058144144144...");
		testDencoder("0.0058144144144144...", "0.002764155374053331456002165116246654154754013140337514216205232010543201150672675272430774317627567146715577120...", "0.0058144144144...");
		testDencoder("-5.8144144144144...", "-5.640765664264640765664264640765664264...", "-5.8144144144...");
		
		// Truncated decimal 15(857142)
		testDencoder("1585.7142857142857142857142...", "3061.555...", "1585.714285714285714285...");
		testDencoder("158.57142857142857142857142...", "236.444...", "158.571428571428571428...");
		testDencoder("15.857142857142857142857142...", "17.666...", "15.857142857142857142...");
		testDencoder("1.5857142857142857142857142...", "1.4537053705370...", "1.5857142857142857142...");
		testDencoder("0.15857142857142857142857142...", "0.1211404306745526235772114043067455262357721140430674552623577...", "0.15857142857142857142...");
		testDencoder("0.015857142857142857142857142...", "0.010074665537527365131415600340543610502777324320237121253344624726350706044216614564115172226757017631007466553...", "0.015857142857142857142...");
		testDencoder("0.0015857142857142857142857142...", "0.000637536757757113557264446343211764040231425173166241567426702057027223635164532676641245650544547765547122212...", "0.0015857142857142857142...");
		testDencoder("-15.857142857142857142857142...", "-17.666...", "-15.857142857142857142...");
		
		// Truncated decimal 11(1886792452830)
		testDencoder("1118.86792452830188679245283018867924528301886792452830...", "2136.674301152207175453361404651034766255706023244163731267430115220717545336140465103476625570602324416373126743011...", "1118.867924528301886792452830188679245283018...");
		testDencoder("111.886792452830188679245283018867924528301886792452830...", "157.706023244163731267430115220717545336140465103476625570602324416373126743011522071754533614046510347662557060232...", "111.886792452830188679245283018867924528301...");
		testDencoder("11.1886792452830188679245283018867924528301886792452830...", "13.140465103476625570602324416373126743011522071754533614046510347662557060232441637312674301152207175453361404651...", "11.188679245283018867924528301886792452830...");
		testDencoder("1.11886792452830188679245283018867924528301886792452830...", "1.074670406606216762363342033031073711715610154144357447467040660621676236334203303107371171561015414435744746704...", "1.1188679245283018867924528301886792452830...");
		testDencoder("0.111886792452830188679245283018867924528301886792452830...", "0.071222347047016230176575002550722624141300644326661435437066370050137651342646571723745562444716116034460375372...", "0.11188679245283018867924528301886792452830...");
		testDencoder("0.0111886792452830188679245283018867924528301886792452830...", "0.005565027067064502331362715044056533474740052025370117603070514004011452426535362456626761666707641317521514431...", "0.011188679245283018867924528301886792452830...");
		testDencoder("0.00111886792452830188679245283018867924528301886792452830...", "0.000445233722236671657261707552004525754374635633577156300237207463464121033674430204533713305372303256273272665...", "0.0011188679245283018867924528301886792452830...");
		testDencoder("-11.1886792452830188679245283018867924528301886792452830...", "-13.140465103476625570602324416373126743011522071754533614046510347662557060232441637312674301152207175453361404651...", "-11.188679245283018867924528301886792452830...");
		
		// Un-parsable
		testDencoder("x", null);
		testDencoder("x.x", null);
		testDencoder("x/x", null);
		testDencoder("0b", null);
		testDencoder("0bx", null);
		testDencoder("0o", null);
		testDencoder("0ox", null);
		testDencoder("0x", null);
		testDencoder("0xx", null);
		testDencoder("0.x", null);
		testDencoder(" ", null);
	}
	
	@Test
	public void test_decoder() {
		// Blank
		testDecoder("", null);
	}
	
	private void testDencoder(String value, String expectedEncodedValue) {
		testDencoder(value, expectedEncodedValue, value);
	}
	
	private void testDencoder(String value, String expectedEncodedValue, String expectedDecodedValue) {
		String encodedValue = NumberOctDencoder.encNumOct(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedEncodedValue, encodedValue);
		
		if (expectedEncodedValue == null) {
			return;
		}
		
		String decodedValue = NumberOctDencoder.decNumOct(new DencodeCondition(encodedValue, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
	
	private void testDecoder(String value, String expectedDecodedValue) {
		String decodedValue = NumberOctDencoder.decNumOct(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
 }
 