/*!
 * dencode-web
 * Copyright 2016 Mozq
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dencode.logic.dencoder;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;

import org.junit.jupiter.api.Test;

import com.dencode.logic.model.DencodeCondition;

public class NumberBinDencoderTest {
	
	@Test
	public void test() {
		// Blank
		testDencoder("", null);
		
		// Integer
		testDencoder("0", "0");
		testDencoder("1", "1");
		testDencoder("2", "10");
		testDencoder("9", "1001");
		testDencoder("10", "1010");
		testDencoder("99", "1100011");
		testDencoder("100", "1100100");
		testDencoder("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "100100000111111100000101110100001011111110100011010010100101011001001110100110101011111110010100101011001100010111010000011100111111100101101001111111100011100110011111100100011101110011100000011011111001000111100001010001011001000001111011110111101111110001010010111010110011001111111100011001011011001110001111110000101011010010");
		testDencoder("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "100100100100110101101001001011001010011000011011111001110101100001011001001111000010011000100110011100000101111110011100010101100111001000000100011100010000100011010011111001010101010110010010000110000100010101000001011101000111100001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
		
		// Integer (+)
		testDencoder("+0", "0", "0");
		testDencoder("+1", "1", "1");
		testDencoder("+2", "10", "2");
		testDencoder("+9", "1001", "9");
		testDencoder("+10", "1010", "10");
		testDencoder("+99", "1100011", "99");
		testDencoder("+100", "1100100", "100");
		testDencoder
		testDencoder
		
		// Integer (-)
		testDencoder("-0", "0", "0");
		testDencoder("-1", "-1");
		testDencoder("-2", "-10");
		testDencoder("-9", "-1001");
		testDencoder("-10", "-1010");
		testDencoder("-99", "-1100011");
		testDencoder("-100", "-1100100");
		testDencoder("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "-100100000111111100000101110100001011111110100011010010100101011001001110100110101011111110010100101011001100010111010000011100111111100101101001111111100011100110011111100100011101110011100000011011111001000111100001010001011001000001111011110111101111110001010010111010110011001111111100011001011011001110001111110000101011010010");
		testDencoder("-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "-100100100100110101101001001011001010011000011011111001110101100001011001001111000010011000100110011100000101111110011100010101100111001000000100011100010000100011010011111001010101010110010010000110000100010101000001011101000111100001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
		
		// Integer
		testDencoder("00", "0", "0");
		testDencoder("01", "1", "1");
		testDencoder("02", "10", "2");
		testDencoder("09", "1001", "9");
		testDencoder("010", "1010", "10");
		testDencoder("099", "1100011", "99");
		testDencoder("0100", "1100100", "100");
		testDencoder
		testDencoder("09999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "100100100100110101101001001011001010011000011011111001110101100001011001001111000010011000100110011100000101111110011100010101100111001000000100011100010000100011010011111001010101010110010010000110000100010101000001011101000111100001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
		
		// Decimal
		testDencoder("0.0", "0.0");
		testDencoder("0.00", "0.0", "0.0");
		testDencoder("1.1", "1.0001100110011...", "1.1...");
		testDencoder("1.01", "1.00000010100011110101110000101000111101011100001010001111010111...", "1.01...");
		testDencoder("1.010", "1.00000010100011110101110000101000111101011100001010001111010111...", "1.01...");
		testDencoder("1.001", "1.000000000100000110001001001101110100101111000110101001111110111110011101101100100010110100001110010101100000010000011000100100110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111100111011011001000101101000011100101011...", "1.001...");
		testDencoder("1.0010", "1.000000000100000110001001001101110100101111000110101001111110111110011101101100100010110100001110010101100000010000011000100100110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111100111011011001000101101000011100101011...", "1.001...");
		testDencoder("2.2", "10.001100110011...", "2.2...");
		testDencoder("9.9", "1001.1110011001100...", "9.9...");
		testDencoder("10.10", "1010.0001100110011...", "10.1...");
		testDencoder("99.99", "1100011.11111101011100001010001111010111000010100011110101110000101000...", "99.99...");
		testDencoder("100.100", "1100100.0001100110011...", "100.1...");
		testDencoderiff
		testDencoderiff
		
		// Decimal (+)
		testDencoder("+0.0", "0.0", "0.0");
		testDencoder("+0.00", "0.0", "0.0");
		testDencoder("+1.1", "1.0001100110011...", "1.1...");
		testDencoder("+1.01", "1.00000010100011110101110000101000111101011100001010001111010111...", "1.01...");
		testDencoder("+1.010", "1.00000010100011110101110000101000111101011100001010001111010111...", "1.01...");
		testDencoder("+1.001", "1.000000000100000110001001001101110100101111000110101001111110111110011101101100100010110100001110010101100000010000011000100100110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111100111011011001000101101000011100101011...", "1.001...");
		testDencoder("+1.0010", "1.000000000100000110001001001101110100101111000110101001111110111110011101101100100010110100001110010101100000010000011000100100110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111100111011011001000101101000011100101011...", "1.001...");
		testDencoder("+2.2", "10.001100110011...", "2.2...");
		testDencoder("+9.9", "1001.1110011001100...", "9.9...");
		testDencoder("+10.10", "1010.0001100110011...", "10.1...");
		testDencoder("+99.99", "1100011.11111101011100001010001111010111000010100011110101110000101000...", "99.99...");
		testDencoder("+100.100", "1100100.0001100110011...", "100.1...");
		testDencoder("+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "100100000111111100000101110100001011111110100011010010100101011001001110100110101011111110010100101011001100010111010000011100111111100101101001111111100011100110011111100100011101110011100000011011111001000111100001010001011001000001111011110111101111110001010010111010110011001111111100011001011011001110001111110000101011010010.000111111001101011011101001101110100011011110110010111110001110000111111100101101000101010111101111100010101010111101000011011000110111010101101110001110111011101110010101000111101101001010111010000001001110101011101101001101011000010001110010100000000010010000011000011000100111111001011101001011110010110110111011110111100011101011...", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889..."); // Diff
		testDencoderiff
		
		// Decimal (-)
		testDencoder("-0.0", "0.0", "0.0");
		testDencoder("-0.00", "0.0", "0.0");
		testDencoder("-1.1", "-1.0001100110011...", "-1.1...");
		testDencoder("-1.01", "-1.00000010100011110101110000101000111101011100001010001111010111...", "-1.01...");
		testDencoder("-1.010", "-1.00000010100011110101110000101000111101011100001010001111010111...", "-1.01...");
		testDencoder("-1.001", "-1.000000000100000110001001001101110100101111000110101001111110111110011101101100100010110100001110010101100000010000011000100100110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111100111011011001000101101000011100101011...", "-1.001...");
		testDencoder("-1.0010", "-1.000000000100000110001001001101110100101111000110101001111110111110011101101100100010110100001110010101100000010000011000100100110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111100111011011001000101101000011100101011...", "-1.001...");
		testDencoder("-2.2", "-10.001100110011...", "-2.2...");
		testDencoder("-9.9", "-1001.1110011001100...", "-9.9...");
		testDencoder("-10.10", "-1010.0001100110011...", "-10.1...");
		testDencoder("-99.99", "-1100011.11111101011100001010001111010111000010100011110101110000101000...", "-99.99...");
		testDencoder("-100.100", "-1100100.0001100110011...", "-100.1...");
		testDencoderiff
		testDencoderiff
		
		// Truncated decimal 0
		testDencoder("0...", "0", "0"); // Non-repeating
		testDencoder("0....", "0", "0"); // Non-repeating
		
		// Truncated decimal (1)
		testDencoder("0.1...", "0.0001100110011..."); // Non-repeating
		testDencoder("0.11...", "0.000111000111000111...", "0.111..."); // Repeating
		testDencoder("0.111...", "0.000111000111000111...", "0.111..."); // Repeating
		testDencoder("0.1111...", "0.000111000111000111...", "0.111..."); // Repeating
		testDencoder("0.11111...", "0.000111000111000111...", "0.111..."); // Repeating
		
		// Truncated decimal (12)
		testDencoder("0.12...", "0.000111101011100001010001111010111000010100011110101110000101..."); // Non-repeating
		testDencoder("0.1212...", "0.000111110000011111000001111100...", "0.121212..."); // Repeating
		testDencoder("0.121212...", "0.000111110000011111000001111100...", "0.121212..."); // Repeating
		testDencoder("0.12121212...", "0.000111110000011111000001111100...", "0.121212..."); // Repeating
		testDencoder("0.1212121212...", "0.000111110000011111000001111100...", "0.121212..."); // Repeating
		
		// Truncated decimal (428571)
		testDencoder("42.8571428571428571428571...", "101010.110110110...", "42.857142857142857142...");
		testDencoder("4.28571428571428571428571...", "100.010010010...", "4.285714285714285714...");
		testDencoder("0.428571428571428571428571...", "0.011011011...", "0.428571428571428571...");
		testDencoder("0.0428571428571428571428571...", "0.0000101011111000101011111000101011111...", "0.0428571428571428571...");
		testDencoder("0.00428571428571428571428571...", "0.00000001000110001101111001011010101100100111011111110100010011000001000110001101111001011010101100100111011111110100010011000001000110001101111001011010101100100111011111110100010011...", "0.00428571428571428571...");
		testDencoder("-0.428571428571428571428571...", "-0.011011011...", "-0.428571428571428571...");
		
		// Truncated decimal 1(571428)
		testDencoder("157.1428571428571428571428...", "10011101.001001001...", "157.142857142857142857...");
		testDencoder("15.71428571428571428571428...", "1111.101101101...", "15.714285714285714285...");
		testDencoder("1.571428571428571428571428...", "1.100100100...", "1.571428571428571428...");
		testDencoder("0.1571428571428571428571428...", "0.0010100000111010100000111010100000111...", "0.1571428571428571428...");
		testDencoder("0.01571428571428571428571428...", "0.00000100000001011101100111110111001110010000110100101010011011000100000001011101100111110111001110010000110100101010011011000100000001011101100111110111001110010000110100101010011011...", "0.01571428571428571428...");
		testDencoder("0.001571428571428571428571428...", "0.000000000110011011111100001100100101001010000001010100010000101011010011001111001000111111110001111101001110000111011101011110100000000010010101110010111110110000011010111010101010010001101100110101100010100110001011100011100111101101110111000100111001101000101111011001011000010110110100100001000011111000000110011011111100001100100...", "0.001571428571428571428...");
		testDencoder("-1.571428571428571428571428...", "-1.100100100...", "-1.571428571428571428...");
		
		// Truncated decimal 58(114)
		testDencoder("581.44144144144...", "1001000101.011100010000001001001110011010100001011100010000001001001110011010100001011100010000001001001110011010100001...", "581.441441441...");
		testDencoder("58.144144144144...", "111010.001001001110011010100001011100010000001001001110011010100001011100010000001001001110011010100001011100010000...", "58.144144144...");
		testDencoder("5.8144144144144...", "101.110100000111110101110110100010110100110100000111110101110110100010110100110100000111110101110110100010110100...", "5.8144144144...");
		testDencoder("0.58144144144144...", "0.100101001101100101011000101001111000011110110011111110111111000011011110111000011010011000100101011101000101010010000000110010001011110110101011101011100111001011110010010000010010000101001101100101011000101001111000011110110011111110111111000011011110111000011010011000100101011101000101010010000000110010001011110110101011101011100...", "0.58144144144...");
		testDencoder("0.058144144144144...", "0.000011101110001010001000110111011000110110010001111111111001100000010110010010011100001111010000100010111010001000001100111000001101111111000100010111100011111010110001110100110101000000100001010110111100000100001100000011000101001100101100101101001001011111001111011100000011101111101101010101000000000101000001001011110111100100010...", "0.058144144144...");
		testDencoder("0.0058144144144144...", "0.00000001011111010000110110101111110000010101101101100110010111000000001000111010100100111001010011011010110000110110011110110000000101100110000001101111110100110001000111001000010101001101000000100010110001101000000100110100011011101011011110101011101010001100011111110001100111111001011110111011100110011011100110110111111100101000...", "0.0058144144144...");
		testDencoder("-5.8144144144144...", "-101.110100000111110101110110100010110100110100000111110101110110100010110100110100000111110101110110100010110100...", "-5.8144144144...");
		
		// Truncated decimal 15(857142)
		testDencoder("1585.7142857142857142857142...", "11000110001.101101101...", "1585.714285714285714285...");
		testDencoder("158.57142857142857142857142...", "10011110.100100100...", "158.571428571428571428...");
		testDencoder("15.857142857142857142857142...", "1111.110110110...", "15.857142857142857142...");
		testDencoder("1.5857142857142857142857142...", "1.1001010111110001010111110001010111110...", "1.5857142857142857142...");
		testDencoder("0.15857142857142857142857142...", "0.00101000100110000010001100011011110010110101011001001110111111101000100110000010001100011011110010110101011001001110111111101000100110000010001100011011110010110101011001001110111111...", "0.15857142857142857142...");
		testDencoder("0.015857142857142857142857142...", "0.000001000000111100110110101101011111101010111011110101001011001100001101110000000011100000101100011110001000101000010111111111011010100011010000010011111001010001010101011011100100110010100111010110011101000111000110000100100010001110110001100101110100001001101001111010010010110111101111000001111110011001000000111100110110101101011...", "0.015857142857142857142...");
		testDencoder("0.0015857142857142857142857142...", "0.000000000110011111101011110111101111111101111001001011101101111010110100100100110011100011010001001111110100000100000010011001100010101001111011001110110010100001101110111100010110111000010000101111000010111010010011110011101001110100101011010110111110110100001010100101110101000101100100101100111111110101101100111001010010010001010...", "0.0015857142857142857142...");
		testDencoder("-15.857142857142857142857142...", "-1111.110110110...", "-15.857142857142857142...");
		
		// Truncated decimal 11(1886792452830)
		testDencoder("1118.86792452830188679245283018867924528301886792452830...", "10001011110.110111100011000001001101010010000111001111101100101011011110001100000100110101001000011100111110110010101101111000110000010011010100100001110011111011001010...", "1118.867924528301886792452830188679245283018...");
		testDencoder("111.886792452830188679245283018867924528301886792452830...", "1101111.111000110000010011010100100001110011111011001010110111100011000001001101010010000111001111101100101011011110001100000100110101001000011100111110110010101101...", "111.886792452830188679245283018867924528301...");
		testDencoder("11.1886792452830188679245283018867924528301886792452830...", "1011.001100000100110101001000011100111110110010101101111000110000010011010100100001110011111011001010110111100011000001001101010010000111001111101100101011011110...", "11.188679245283018867924528301886792452830...");
		testDencoder("1.11886792452830188679245283018867924528301886792452830...", "1.0001111001101110001000001101100001100100011101111100100111100110111000100000110110000110010001110111110010011110011011100010000011011000011001000111011111001...", "1.1188679245283018867924528301886792452830...");
		testDencoder("0.111886792452830188679245283018867924528301886792452830...", "0.000111001010010010011100111000100111000001110010011000001111110101111101000000010101101000111010010110010100001100001011000000110100100011010110110110001100011101100011111000110110011111000000101000001011111110101001011100010110100110101111001111010011111100101101110010100100100111001110001001110000011100100110000011111101011111010...", "0.11188679245283018867924528301886792452830...");
		testDencoder("0.0111886792452830188679245283018867924528301886792452830...", "0.000000101101110101000010111000110111000110100101000010011011001011110010111001101000100100000101110101011011100111100111100000000101010000010101011111000001001111110000011000111000101001100000000100000001001100101010100010110101011101011110010100101110110010110111110001110110110111000111110100001011001111101010001101001100100011001...", "0.011188679245283018867924528301886792452830...");
		testDencoder("0.00111886792452830188679245283018867924528301886792452830...", "0.000000000100100101010011011111010010010011110110111001110101111010110001111000111101101010000000100101010101111101100011111100110011101110011011101111111001101110011000000010011111010000111100110011100110100001010001000011011110111100100011000010000100101011011111001011011000101011111010011000011010101110010111011010111010110110101...", "0.0011188679245283018867924528301886792452830...");
		testDencoder("-11.1886792452830188679245283018867924528301886792452830...", "-1011.001100000100110101001000011100111110110010101101111000110000010011010100100001110011111011001010110111100011000001001101010010000111001111101100101011011110...", "-11.188679245283018867924528301886792452830...");
		
		// Un-parsable
		testDencoder("x", null);
		testDencoder("x.x", null);
		testDencoder("x/x", null);
		testDencoder("0b", null);
		testDencoder("0bx", null);
		testDencoder("0o", null);
		testDencoder("0ox", null);
		testDencoder("0x", null);
		testDencoder("0xx", null);
		testDencoder("0.x", null);
		testDencoder(" ", null);
	}
	
	@Test
	public void test_decoder() {
		// Blank
		testDecoder("", null);
	}
	
	private void testDencoder(String value, String expectedEncodedValue) {
		testDencoder(value, expectedEncodedValue, value);
	}
	
	private void testDencoder(String value, String expectedEncodedValue, String expectedDecodedValue) {
		String encodedValue = NumberBinDencoder.encNumBin(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedEncodedValue, encodedValue);
		
		if (expectedEncodedValue == null) {
			return;
		}
		
		String decodedValue = NumberBinDencoder.decNumBin(new DencodeCondition(encodedValue, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
	
	private void testDecoder(String value, String expectedDecodedValue) {
		String decodedValue = NumberBinDencoder.decNumBin(new DencodeCondition(value, StandardCharsets.UTF_8, "\r\n", null, new HashMap<>() {
			private static final long serialVersionUID = 1L;
			{
			}
		}));
		assertEquals(expectedDecodedValue, decodedValue);
	}
 }
 